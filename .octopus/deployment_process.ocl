step "apply-a-terraform-template" {
    name = "Apply a Terraform template"

    action {
        action_type = "Octopus.TerraformApply"
        properties = {
            Octopus.Action.Aws.AssumeRole = "False"
            Octopus.Action.Aws.Region = "eu-west-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWSAccount"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "False"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "AWS"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        container {
            feed = "dockerfeed"
            image = "octopusdeploy/worker-tools:6.1.1-windows.ltsc2022"
        }
    }
}

step "wait-for-target" {
    name = "Wait for Target"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.Script.ScriptBody = <<-EOT
                #Loop til we see the tentacle we want so that the health check in the next step passes
                $OctopusServerUrl = "https://octopus-operations.octopus.app"
                $machineName = $OctopusTargetName+"_TARGET"
                $ApiKey = $OctopusAPIKey
                $SpaceId = $OctopusSpace
                
                
                $found = $false
                $count = 0
                
                while ($found -eq $false){
                  $machines = Invoke-RestMethod -Method GET -Uri "$OctopusServerUrl/api/$($SpaceId)/machines" -Headers @{"X-Octopus-ApiKey" = "$ApiKey" }
                  foreach ($machine in $machines.Items){
                        if ($machine.Name -eq $machineName){
                          $found = $true
                          Write-Host "Found the machine. Sleeping for 30s to make sure it's ready for the health check."
                          Start-Sleep -s 30
                          break
                
                        }
                    }
                  if ($found -eq $false){
                    write-host "It's not ready yet. Waiting 10 seconds and 🔁 again."
                    start-sleep -s 10
                    $count++
                  }
                
                  if ($count -eq 30){
                  	Write-Error "Tentacle didnt spin up within 5 minutes. You may need to destroy AWS resources and the tentacle in Octopus. Please check both."
                  }
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-ubuntu"
    }
}

step "health-check" {
    name = "Health Check"
    properties = {
        Octopus.Action.TargetRoles = "AWS-EC2"
    }

    action {
        action_type = "Octopus.HealthCheck"
        properties = {
            Octopus.Action.HealthCheck.ErrorHandling = "TreatExceptionsAsErrors"
            Octopus.Action.HealthCheck.IncludeMachinesInDeployment = "DoNotAlterMachines"
            Octopus.Action.HealthCheck.Type = "FullHealthCheck"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "manual-intervention-required" {
    name = "Manual Intervention Required"

    action {
        action_type = "Octopus.Manual"
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Is it done?"
            Octopus.Action.Manual.ResponsibleTeamIds = "global/everyone"
            Octopus.Action.RunOnServer = "false"
        }
    }
}

step "destroy-terraform-resources" {
    name = "Destroy Terraform resources"

    action {
        action_type = "Octopus.TerraformDestroy"
        properties = {
            Octopus.Action.Aws.Region = "eu-west-2"
            Octopus.Action.AwsAccount.UseInstanceRole = "False"
            Octopus.Action.AwsAccount.Variable = "AWSAccount"
            Octopus.Action.GitRepository.Source = "Project"
            Octopus.Action.GoogleCloud.ImpersonateServiceAccount = "False"
            Octopus.Action.GoogleCloud.UseVMServiceAccount = "True"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptSource = "GitRepository"
            Octopus.Action.Terraform.AllowPluginDownloads = "True"
            Octopus.Action.Terraform.AzureAccount = "False"
            Octopus.Action.Terraform.GoogleCloudAccount = "False"
            Octopus.Action.Terraform.ManagedAccount = "AWS"
            Octopus.Action.Terraform.PlanJsonOutput = "False"
            Octopus.Action.Terraform.RunAutomaticFileSubstitution = "True"
            OctopusUseBundledTooling = "False"
        }
        worker_pool_variable = ""

        container {
            feed = "dockerfeed"
            image = "octopusdeploy/worker-tools:6.1.1-windows.ltsc2022"
        }
    }
}